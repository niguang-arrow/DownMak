" The configuration of Vundle
set nocompatible              " required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Add all your plugins here (note older versions of Vundle used Bundle instead of Plugin)
"Plugin 'cjrh/vim-conda'        	      " switch python interpreter
Plugin 'vim-scripts/indentpython.vim' " autoindent
" YouCompleteMe 没有装成, 不支持 Anaconda 的 Python.
Plugin 'Valloric/YouCompleteMe'       " auto completion
"Plugin 'davidhalter/jedi-vim'	      " 选用 jedi-vim 自动补全
Plugin 'scrooloose/syntastic'         " check syntatic problem
Plugin 'tell-k/vim-autopep8'          " 按照 pep8 标准格式化代码
Plugin 'Yggdroot/indentLine'          " 缩进指示线
Plugin 'scrooloose/nerdtree'          " 添加树形目录，方便查看和切换文件
Plugin 'scrooloose/nerdcommenter'     " 方便写注释
Plugin 'kien/rainbow_parentheses.vim' " 为括号添加颜色
Plugin 'kien/ctrlp.vim'               " 适应 Ctrl + P 搜索
Plugin 'altercation/vim-colors-solarized'  " 与 theme 相关
Plugin 'jnurmine/Zenburn'                  " theme
Plugin 'tomasr/molokai'                    " theme
Plugin 'carakan/new-railscasts-theme'
Plugin 'nightsense/vim-crunchbang'
Plugin 'KeitaNakamura/neodark.vim'
Plugin 'ayu-theme/ayu-vim'      "这个挺棒的,看网址:https://github.com/ayu-theme/ayu-vim
Plugin 'vim-scripts/phd'              " 上面四个插件都是关于 theme 的.
Plugin 'flazz/vim-colorschemes'      " 有这个插件后, 可以轻松地选择很多个 theme
"Plugin 'Lokaltog/vim-powerline'       " 状态栏， 后面两个更为强大
Plugin 'vim-airline/vim-airline'       " 提供更多的主题
Plugin 'vim-airline/vim-airline-themes'
Plugin 'nathanaelkane/vim-indent-guides' " 显示代码缩进
Plugin 'jiangmiao/auto-pairs'            " 括号自动补全
Plugin 'ervandew/supertab'               " 使用 Tab 键进行自动补全
"Plugin 'edkolev/tmuxline.vim'            " 使用 tmux + vim 主题
Plugin 'octol/vim-cpp-enhanced-highlight' " C++ 语法高亮
Plugin 'derekwyatt/vim-fswitch'           " *.h 文件与 *.cpp 文件快速切换
Plugin 'kshenoy/vim-signature'            " 书签可视化
" Plugin 'lervag/vimtex'                   " 编辑 LaTeX 文件
Plugin 'xuhdev/vim-latex-live-preview'   " Lively Preview LaTeX pdf
Plugin 'vim-scripts/Conque-Shell'        " 在 vim 中使用交互式命令, 安装失败，使用 vmb文件安装成功
Plugin 'majutsushi/tagbar'               " 基于标签的标识符列表
"Plugin 'Shougo/neocomplete.vim'         " 强大的自动补全
Plugin 'dyng/ctrlsf.vim'                 " 内容查找, 还会列出上下文, 需提前安装ack
Plugin 'terryma/vim-multiple-cursors'    " 多项选择,搭配ctrlsf 使用效果更佳
Plugin 'christoomey/vim-tmux-navigator'  " 实现 vim 和 tmux 无缝跳转
Plugin 'skywind3000/asyncrun.vim'  " 在 vim 内编译程序, c++, python 等
Plugin 'SirVer/ultisnips'          " 代码片段, 模板补全
Plugin 'honza/vim-snippets'        " 上面是引擎,下面是真正的模板片段 
Plugin 'francoiscabrol/ranger.vim' " 在 vim 中使用 ranger

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" 将外部命令 wmctrl 控制窗口最大化的命令行参数封装成一个 vim 的函数
fun! ToggleFullscreen()
    call system("wmctrl -ir " . v:windowid . " -b toggle,fullscreen")
endf
" 全屏开/关快捷键
map <silent> <F11> :call ToggleFullscreen()<CR>
" 启动 vim 时自动全屏(暂时关闭）
" autocmd VimEnter * call ToggleFullscreen()

" 让配置变更立即生效, 重要的功能：保存.vimrc 文件就能重新加载 vim
" 原本没有 | AirlineRefresh (https://github.com/vim-airline/vim-airline/issues/312)
" 那一项的, 可是加上了保存 .vimrc 时没有这一项 airline 不能正常渲染
" autocmd BufWritePost $MYVIMRC source $MYVIMRC
autocmd BufWritePost $MYVIMRC source $MYVIMRC | AirlineRefresh

" https://www.johnhawthorn.com/2012/09/vi-escape-delays/
" 不这样设置, 返回 normal 模式的时候会有延迟, 同时 tmux 以及 zsh
" 最好也设置一下(觉得如果实在 tmux 以及 zsh 下使用 vi 模式才会遇到
" 同样的问题,) 查看上面的链接
set timeoutlen=1000 ttimeoutlen=20

"""" powerline 以及 airline 设置状态栏主题风格
let g:airline_powerline_fonts = 1
"let g:airline_theme='luna'
"let g:airline_theme='base16_monokai'
"let g:airline_theme='base16_harmonic16'
let g:airline_theme='base16_isotope'

let g:airline#extensions#tabline#buffer_nr_show = 1   " tabline 中 buffer 显示编号

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

" airline symbols
" 安装字体后看 airline 的手册
let g:airline_left_sep = '⮀'
let g:airline_left_alt_sep = '⮁'
let g:airline_right_sep = '⮂'
let g:airline_right_alt_sep = '⮃'
"let g:airline_left_sep = ''
"let g:airline_left_alt_sep = ''
"let g:airline_right_sep = ''
"let g:airline_right_alt_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''

" 是否启用顶部tabline
let g:airline#extensions#tabline#enabled = 1
" 顶部tabline显示方式
let g:airline#extensions#tabline#left_sep = '⮀'
let g:airline#extensions#tabline#left_alt_sep = '⮀'
"let g:airline#extensions#tabline#left_sep = ''
"let g:airline#extensions#tabline#left_alt_sep = ''
" 默认是1开启空白符检测,但是状态栏不太好看, 这里设置为取消
let g:airline#extensions#whitespace#enabled = 0


" 设置显示空白字符
" vim 本身有 set list 以及 set nolist 显示/不显示空白字符
" 下面参考: http://vimcasts.org/episodes/show-invisibles/
set list
" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬

" 设置 gvim 显示字体
"set guifont=YaHei\ Consolas\ Hybrid\ 14
set t_Co=256 "设置terminal color: http://vim.wikia.com/wiki/Switch_color_schemes
" set guifont=SourceCodePro\ for\ Powerline\ 12.8  " terminal 12.6
"set guifont=SourceCodePro\ for\ Powerline\ 13.8
set guifont=SourceCodePro\ for\ Powerline\ 13.2

" 配色方案
set background=dark    " 还有 light 可以选择
"colorscheme solarized
"https://github.com/flazz/vim-colorschemes/tree/prep
"http://vimcolors.com/
"colorscheme molokai
"colorscheme phd
"colorscheme zenburn
"colorscheme new-railscasts
if has('gui_running')
    "let ayucolor='mirage'
    "colorscheme ayu
    colorscheme neodark
else
    "colorscheme molokai
    colorscheme solarized
    set t_Co=16
    let g:solarized_termcolors=16
    let g:solarized_termtrans=1
endif

"----------------------------------
"set termguicolors     " enable true colors support
"let ayucolor="light"  " for light version of theme
"let ayucolor="mirage" " for mirage version of theme
"let ayucolor="dark"   " for dark version of theme
"colorscheme ayu  "这个很棒的, 还有上面几个选项
"-----------------------------------

if &term =~ "xterm\\|rxvt"
  " use an orange cursor in insert mode
  let &t_SI = "\<Esc>]12;orange\x7"
  " use a red cursor otherwise
  let &t_EI = "\<Esc>]12;white\x7"
  silent !echo -ne "\033]12;gray\007"
  " reset cursor when vim exits
  autocmd VimLeave * silent !echo -ne "\033]112\007"
  " use \003]12;gray\007 for gnome-terminal and rxvt up to version 9.21
endif

"""" 定义快捷键
filetype on        " 开启文件类型侦测, 允许基于不同的语言加载不同的插件.
filetype plugin on " 根据侦测到的不同类型加载对应的插件
let mapleader=";"  " 定义快捷键的前缀，即<Leader>
nmap LB 0          " 定义快捷键到行首和行尾
nmap LE $
"vnoremap <Leader>y "+y  " 设置快捷键将选中文本块复制至系统剪贴板
"nmap <Leader>p "+p      " 设置快捷键将系统剪贴板内容粘贴至 vim
nmap <Leader>q :q<CR>   " 定义快捷键关闭当前分割窗口
nmap <Leader>w :w<CR>   " 定义快捷键保存当前窗口内容
nmap <Leader>WQ :wa<CR>:q<CR> " 定义快捷键保存所有窗口内容并退出 vim
"nmap <Leader>Q :qa!<CR> " 不做任何保存，直接退出 vim
" "* 寄存器指代 '当前选择区',
" "+ 寄存器指代 '公共剪贴板'
nnoremap <leader>v "+p  " 从公共剪贴板粘贴, 粘贴到当前光标之后
nnoremap <leader>V "+P  " 从公共剪贴板粘贴, 粘贴到当前光标之前
vnoremap <leader>c "+y " 将内容复制到公共剪贴板
vnoremap <leader>x "+x " 将内容剪切到公共剪贴板
nnoremap <leader>n <ESC>:tabnew<CR> " 打开一个新的标签页
nnoremap <leader>c <ESC>:tabclose<CR> " 关闭当前标签页
map <C-s> <ESC>:w<CR>
imap <C-S-s> <ESC>:browse confirm saveas<CR> " Ctrl+Shift+S 另存为
nmap <Leader>a <ESC>ggVG"+y<ESC> " 复制所有至公共剪贴板
nnoremap nw <ESC><C-w><C-w>     " 依次遍历所有子窗口
nnoremap <Leader>l <C-W>l " 跳转至右方的窗口
nnoremap <Leader>h <C-W>h " 跳转至左方的窗口
nnoremap <Leader>k <C-W>k " 跳转至上方的子窗口
"nnoremap <Leader>j <C-W>j " 跳转至下方的子窗口
nnoremap <C-J> <C-W><C-J> " 使用如下快捷键对子窗口进行切换
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
" 映射切换 buffer 的键位
nnoremap [b :bp<CR>
nnoremap ]b :bn<CR>
" 映射 <leader>num 到 num buffer
map <leader>1 :b 1<CR>
map <leader>2 :b 2<CR>
map <leader>3 :b 3<CR>
map <leader>4 :b 4<CR>
map <leader>5 :b 5<CR>
map <leader>6 :b 6<CR>
map <leader>7 :b 7<CR>
map <leader>8 :b 8<CR>
map <leader>9 :b 9<CR>

"" 一键编译, 注意输出执行文件为 main, :cw 调出 quickfix
"nmap <leader>m :!rm -rf main<CR>:wa<CR>:make<CR><CR>:cw<CR>
"" 一键编译及运行
"nmap <leader>g :!rm -rf main<CR>:wa<CR>:make<CR><CR>:cw<CR>:!./main<CR>

" 使用 ctrlsf.vim 插件在工程内全局查找光标所在关键字，设置快捷键
" 快捷键速记法：search in project (原来使用 sp, 但发现sf 更方便)
nnoremap <Leader>sf :CtrlSF<CR>

" 从括号或者引号之间跳出来
" https://stackoverflow.com/questions/11037825/vim-get-out-of-parenthesis-brackets-etc
inoremap <C-e> <C-o>A


" 设置环境保存项
set sessionoptions="blank,buffers,globals,localoptions,tabpages,sesdir,folds,help,options,resize,winpos,winsize"
" 保存 undo 历史
set undodir=~/.undo_history/
set undofile
" 保存快捷键
map <leader>ss :mksession! my.vim<cr> :wviminfo! my.viminfo<cr>
" 恢复快捷键
map <leader>rs :source my.vim<cr> :rviminfo my.viminfo<cr>


" 拆分窗口
set splitbelow             " 设置拆分的窗口应该出现在哪个位置
set splitright

" 显示相关
"set lines=40 columns=155   " 设定窗口大小
set showcmd                 " 输入的命令显示出来， 看的清楚些
"set cmdheight=1            " 命令行（在状态行下）的高度，设置为1

" 禁止光标闪烁
set gcr=a:block-blinkon0
" 禁止显示滚动条
set guioptions-=l
set guioptions-=L
set guioptions-=r
set guioptions-=R
" 禁止显示菜单和工具条
set guioptions-=m
set guioptions-=T

"""" 实用设置
set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936
set termencoding=utf-8
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936
set fileencoding=utf-8
"set encoding=utf-8                   " UTF-8
"set fenc=utf-8                       " 文件编码
set mouse=a                          " 启用鼠标
set selection=exclusive
set selectmode=mouse,key
set laststatus=2                     " 总是显示状态栏
set ruler                            " 显示光标当前位置
set number                           " 开启行号显示
function! NumberToggle()
    if(&relativenumber == 1)
        set number
    else
        set relativenumber
    endif
endfunc
nnoremap <leader>r :call NumberToggle()<CR>
set cursorline                       " 高亮显示当前行/列
set cursorcolumn
"set hlsearch                         " 高亮显示搜索结果
set nohlsearch
set nowrap                           " 禁止折行
set showmatch                        " 高亮显示匹配的括号
set scrolloff=5                      " 距离顶部和底部5行
set incsearch              	         " 开启实时搜索功能
set ignorecase                       " 搜索时大小写不敏感
set nocompatible                     " 关闭兼容模式
set wildmenu                         " vim 自身命令行模式智能补全
set clipboard+=unnamed               " 共享剪贴板
set nobackup                         " 从不备份 
set noswapfile
set autoread                         " 设置当文件被改动时自动载入
set autowrite                        " 自动保存
set confirm                          " 处理未保存或只读文件时，弹出确认
" 代码分析
syntax enable 		             " 开启语法高亮功能
syntax on                       " 允许用指定语法高亮配色方案替换默认方案
filetype indent on                   " 自适应不同语言的智能缩进
set expandtab		             " 将制表符扩展为空格
set tabstop=4		             " 设置编辑时制表符占用空格数
set shiftwidth=4	 	     " 设置格式化时制表符占用空格数
set softtabstop=4       	 " 让 vim 把连续数量的空格视为一个制表符
"set textwidth=100         	     " 限制每行文本的长度
set fileformat=unix
set fillchars=vert:\ ,stl:\ ,stlnc:\  " 在被分割的窗口间显示空白，便于阅读
set linespace=0                       " 字符间插入的像素行数目
set autoindent                       " 自动缩进
set smarttab                         " 在行和段开始处使用制表符
set cindent 
set smartindent
set expandtab
set backspace=2  " 使回格键（backspace）正常处理indent, eol, start等
" 基于缩进或语法进行代码折叠
" set foldmethod=indent
set foldmethod=syntax 
" 启动 vim 时关闭折叠代码, za:打开或关闭所有折叠;  zM:关闭所有折叠, 
" zR: 打开所有折叠
set nofoldenable       

" vimtex 的配置
let g:vimtex_enabled = 1
let g:vimtex_disable_version_warning = 1
let g:vimtex_complete_enabled = 1   " Use this option to enable completion
let g:vimtex_complete_close_braces = 1 " This option controls whether to append a closing brace after a label or a citation has been completed. DF: 0
let g:vimtex_complete_img_use_tail = 1 " Only the tail part of file names are completed. This is useful if 'graphicx' package and '\graphicspath' command is used. DF: 0
let g:vimtex_delim_toggle_mod_list = [
    \ ['\left', '\right'],
    \ ['\bigl', '\bigr']
    \]
let g:vimtex_fold_enabled = 0   " Use this option to enable folding.
let g:vimtex_fold_comments = 0  " Control whether or not to fold multiline comments.
let g:vimtex_fold_preamble = 0  " DF: 1. Fold the preamble. 

" Disable latex symbol conversion in vim
" Vim 的 'conceal' feature 会在tex 文件中直接将LaTeX命令转换为编译后的命令,
" 不需要这个功能, 设置为 0, 需要的话可以设置为2, 看 :h ft-tex-syntex
let g:tex_conceal = 0

"缩进指示线"
let g:indentLine_char='┆'
let g:indentLine_enabled = 1
"let g:indentLine_leadingSpaceEnabled=1
"let g:indentLine_leadingSpaceChar='.'

"autopep8设置"
let g:autopep8_disable_show_diff=1

" vim-fswitch 的配置(.h 文件和 .cpp 文件快速切换)
nmap <silent> <leader>sw :FSHere<CR>

" vim-signature 的配置(书签可视化)
let g:SignatureMap = {
        \ 'Leader'             :  "m",
        \ 'PlaceNextMark'      :  "m,",
        \ 'ToggleMarkAtLine'   :  "m.",
        \ 'PurgeMarksAtLine'   :  "m-",
        \ 'DeleteMark'         :  "dm",
        \ 'PurgeMarks'         :  "mda",
        \ 'PurgeMarkers'       :  "m<BS>",
        \ 'GotoNextLineAlpha'  :  "']",
        \ 'GotoPrevLineAlpha'  :  "'[",
        \ 'GotoNextSpotAlpha'  :  "`]",
        \ 'GotoPrevSpotAlpha'  :  "`[",
        \ 'GotoNextLineByPos'  :  "]'",
        \ 'GotoPrevLineByPos'  :  "['",
        \ 'GotoNextSpotByPos'  :  "mn",
        \ 'GotoPrevSpotByPos'  :  "mp",
        \ 'GotoNextMarker'     :  "[+",
        \ 'GotoPrevMarker'     :  "[-",
        \ 'GotoNextMarkerAny'  :  "]=",
        \ 'GotoPrevMarkerAny'  :  "[=",
        \ 'ListLocalMarks'     :  "ms",
        \ 'ListLocalMarkers'   :  "m?"
        \ }

""""rainbow_parentheses 配置， 为括号添加颜色
let g:rbpt_colorpairs = [ ['brown', 'RoyalBlue3'], ['Darkblue', 'SeaGreen3'], ['darkgray', 'DarkOrchid3'], ['darkgreen', 'firebrick3'],['darkcyan', 'RoyalBlue3'],['darkred', 'SeaGreen3'],['darkmagenta', 'DarkOrchid3'],['brown', 'firebrick3'],['gray', 'RoyalBlue3'],['black',       'SeaGreen3'],['darkmagenta', 'DarkOrchid3'],['Darkblue',  'firebrick3'],['darkgreen', 'RoyalBlue3'],['darkcyan', 'SeaGreen3'],['darkred', 'DarkOrchid3'],['red', 'firebrick3']]
let g:rbpt_max = 16
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

"""""" NERDTree 配置
"F2开启和关闭树"
map <F2> :NERDTreeToggle<CR>
let NERDTreeChDirMode=1
"显示书签"
let NERDTreeShowBookmarks=1
"设置忽略文件类型"
let NERDTreeIgnore=['\~$', '\.pyc$', '\.swp$']
"窗口大小"
let NERDTreeWinSize=25

"""" nerdcommenter 配置
" 使用 F4 对代码进行注释， 多行注释可以在 Visual 模式下
map <F4> <leader>ci 

" 一键执行 Python 代码，  
" 需要 vim 中的 autopep8插件以及 python 中的 autopep8 包
"按F5运行python"
"map <F5> :Autopep8<CR> :w<CR> :call RunPython()<CR>
"function RunPython()
  "let mp = &makeprg
  "let ef = &errorformat
  "let exeFile = expand("%:t")
  "setlocal makeprg=python\ -u
  "set efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m
  "silent make %
  "copen
  "let &makeprg = mp
  "let &errorformat = ef
"endfunction


" 缩进， 需要 Indent Guides 插件
let g:indent_guides_enable_on_vim_startup=1  " 随 vim 自启动
let g:indent_guides_start_level=2    " 从第二层开始可视化显示缩进
let g:indent_guides_guide_size=1     " 色块宽度
" 快捷键 i 开/关缩进可视化
:nmap <silent> <Leader>i <Plug>IndentGuidesToggle 

" 代码折叠
" 操作：za，打开或关闭当前折叠；zM，关闭所有折叠；zR，打开所有折叠
" 基于缩进或语法进行代码折叠
"set foldmethod=indent
set foldmethod=syntax
" 启动 vim 时关闭折叠代码
set nofoldenable


" style for HTML, etc.
au BufNewFile,BufRead *.js, *.html, *.css
\ set tabstop=2
\ set softtabstop=2
\set shiftwidth=2

" tagbar 的配置 (基于标签的标识符列表)
" 设置 tagbar 子窗口的位置出现在主编辑区的左边 
let tagbar_right=1 
" 设置显示／隐藏标签列表子窗口的快捷键。速记：identifier list by tag
"nnoremap <Leader>ilt :TagbarToggle<CR> 
nmap <F9> :TagbarToggle<CR>
" 设置标签子窗口的宽度 
let tagbar_width=32 
" tagbar 子窗口中不显示冗余帮助信息 
let g:tagbar_compact=1
" 设置 ctags 对哪些代码标识符生成标签
let g:tagbar_type_cpp = {
    \ 'kinds' : [
         \ 'c:classes:0:1',
         \ 'd:macros:0:1',
         \ 'e:enumerators:0:0', 
         \ 'f:functions:0:1',
         \ 'g:enumeration:0:1',
         \ 'l:local:0:1',
         \ 'm:members:0:1',
         \ 'n:namespaces:0:1',
         \ 'p:functions_prototypes:0:1',
         \ 's:structs:0:1',
         \ 't:typedefs:0:1',
         \ 'u:unions:0:1',
         \ 'v:global:0:1',
         \ 'x:external:0:1'
     \ ],
     \ 'sro'        : '::',
     \ 'kind2scope' : {
         \ 'g' : 'enum',
         \ 'n' : 'namespace',
         \ 'c' : 'class',
         \ 's' : 'struct',
         \ 'u' : 'union'
     \ },
     \ 'scope2kind' : {
         \ 'enum'      : 'g',
         \ 'namespace' : 'n',
         \ 'class'     : 'c',
         \ 'struct'    : 's',
         \ 'union'     : 'u'
     \ }
\ }

" vim-tmux-navigator  (实现 vim 和 tmux 无缝跳转)
"https://github.com/christoomey/vim-tmux-navigator
"--------------------------
" 默认使用以下快捷键
"<ctrl-h> => Left
"<ctrl-j> => Down
"<ctrl-k> => Up
"<ctrl-l> => Right
"<ctrl-\> => Previous split
"---------------------------


" YouCompleteMe 自动补全神器的配置
" YCM 补全菜单配色
" 菜单
"highlight Pmenu ctermfg=2 ctermbg=3 guifg=#005f87 guibg=#EEE8D5
" 选中项
"highlight PmenuSel ctermfg=2 ctermbg=3 guifg=#AFD700 guibg=#106900
" 补全功能在注释中同样有效
let g:ycm_complete_in_comments=1
" 允许 vim 加载 .ycm_extra_conf.py 文件，不再提示
let g:ycm_confirm_extra_conf=0
" 开启 YCM 标签补全引擎
let g:ycm_collect_identifiers_from_tags_files=1
" 引入 C++ 标准库tags
"set tags+=/data/misc/software/misc./vim/stdcpp.tags
" YCM 集成 OmniCppComplete 补全引擎，设置其快捷键
inoremap <leader>; <C-x><C-o>
" 补全内容不以分割子窗口形式出现，只显示补全列表
set completeopt-=preview
" 从第一个键入字符就开始罗列匹配项
let g:ycm_min_num_of_chars_for_completion=1
" 禁止缓存匹配项，每次都重新生成匹配项
let g:ycm_cache_omnifunc=0
" 语法关键字补全			
let g:ycm_seed_identifiers_with_syntax=1


" asyncrun.vim 的配置 (在 vim 内编译程序, c++, python 等)
" Quick run via <F5>
nnoremap <F5> :call <SID>compile_and_run()<CR>

augroup SPACEVIM_ASYNCRUN
    autocmd!
    " Automatically open the quickfix window
    autocmd User AsyncRunStart call asyncrun#quickfix_toggle(15, 1)
augroup END

function! s:compile_and_run()
    exec 'w'
    if &filetype == 'c'
        exec "AsyncRun! gcc % -o %<; time ./%<"
    elseif &filetype == 'cpp'
       exec "AsyncRun! g++ -std=c++11 % -o %<; time ./%<"
    elseif &filetype == 'java'
       exec "AsyncRun! javac %; time java %<"
    elseif &filetype == 'sh'
       exec "AsyncRun! time bash %"
    elseif &filetype == 'python'
       exec "AsyncRun! time python %"
    endif
endfunction


" vim-multiple-cursors 快捷键 
" 默认下一个是 ctrl + n
"let g:multi_cursor_next_key='<S-n>'
"let g:multi_cursor_skip_key='<S-k>'
"
"

" SirVer/ultisnips 模板补全的设置         
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
"let g:UltiSnipsExpandTrigger="<c-g>"  " g 表示 generate
let g:UltiSnipsExpandTrigger="<c-g>"  " g 表示 generate
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

"'xuhdev/vim-latex-live-preview' 设置
autocmd Filetype tex setl updatetime=1
let g:livepreview_previewer = 'evince'


" 'francoiscabrol/ranger.vim' " 在 vim 中使用 ranger
let g:ranger_map_keys = 0
map <leader>f :Ranger<CR>
